import { Idraw, Iparams, IimgObject } from './Types';
import { Input } from './Input';
import { Vec3 } from './Vector';
export declare class Draw extends Input implements Idraw {
    #private;
    setupParams: (ctx: CanvasRenderingContext2D) => void;
    loopParams: (ctx: CanvasRenderingContext2D) => void;
    get width(): number;
    set width(w: number);
    get height(): number;
    set height(h: number);
    get center(): Vec3;
    strokeOpen: boolean;
    fillOpen: boolean;
    frame: number;
    constructor(params?: Iparams);
    private canvasElementInit;
    private canvasSizeInit;
    protected _createElement(elem?: string): HTMLElement;
    preload(cb: () => void): void;
    setup(cb: (ctx: CanvasRenderingContext2D) => void): void;
    loop(cb: (ctx: CanvasRenderingContext2D) => void): void;
    loopOnce(): void;
    strokeWeight(width: number): this;
    private beginPath;
    private closePath;
    save(): this;
    restore(): this;
    line(x1: number, y1: number, x2: number, y2: number): this;
    dashline(x1: number, y1: number, x2: number, y2: number, segments?: number[]): this;
    rect(x: number, y: number, width?: number, height?: number): this;
    circle(radius: number, x: number, y: number): this;
    point(x: number, y: number): this;
    image(file: IimgObject, x: number, y: number): this;
    translate(x: number, y: number): this;
    rotate(angle: number): this;
    scale(x: number, y?: number): this;
    textSize(size: number): this;
    text(text: string, x: number, y: number): this;
    fillStyle(color: string | CanvasGradient | CanvasPattern): this;
    strokeStyle(color: string | CanvasGradient | CanvasPattern): this;
    lineWidth(width: number): this;
    getBezierPoints(p0: Vec3, p1: Vec3, p2: Vec3, p3: Vec3, number?: number): Vec3[];
    private draw;
    clear(): this;
    background(color: string): this;
    private loadMedia;
    loadImage(path: string): any;
    saveFrame(): void;
}
